{"ast":null,"code":"var _jsxFileName = \"/Users/vancetan/Documents/the-next-stage/Frontend/utils/youtube.js\";\nvar __jsx = React.createElement;\nimport React, { useState, useRef, useEffect } from \"react\";\n\nconst LiteYouTubeEmbed = ({\n  adNetwork,\n  id,\n  playlist,\n  poster,\n  title,\n  noCookie,\n  activatedClass,\n  iframeClass,\n  playerClass,\n  wrapperClass\n}) => {\n  const {\n    0: preconnected,\n    1: setPreconnected\n  } = useState(false);\n  const {\n    0: iframe,\n    1: setIframe\n  } = useState(false);\n  const videoId = encodeURIComponent(id);\n  const videoTitle = title;\n  const posterUrl = `https://i.ytimg.com/vi/${videoId}/${poster}.jpg`;\n  const ytUrl = noCookie ? \"https://www.youtube-nocookie.com\" : \"https://www.youtube.com\";\n  const iframeSrc = !playlist ? `${ytUrl}/embed/${videoId}?autoplay=1` : `${ytUrl}/embed/videoseries?list=${videoId}`;\n  const refVideo = useRef();\n\n  const warmConnections = () => {\n    if (preconnected) return;\n    setPreconnected(true);\n  };\n\n  const addIframe = () => {\n    if (iframe) return;\n    setIframe(true);\n  };\n\n  useEffect(() => {\n    const {\n      current\n    } = refVideo;\n    current.style.backgroundImage = `url('${posterUrl}')`;\n    current.addEventListener(\"pointerover\", warmConnections, true);\n    current.addEventListener(\"click\", addIframe, true);\n    return () => {\n      current.removeEventListener(\"pointerover\", warmConnections);\n      current.removeEventListener(\"click\", addIframe);\n    };\n  });\n  return __jsx(React.Fragment, null, __jsx(\"link\", {\n    rel: \"preload\",\n    href: posterUrl,\n    as: \"image\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }\n  }), __jsx(React.Fragment, null, preconnected && __jsx(React.Fragment, null, __jsx(\"link\", {\n    rel: \"preconnect\",\n    href: ytUrl,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }\n  }), __jsx(\"link\", {\n    rel: \"preconnect\",\n    href: \"https://www.google.com\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }\n  }), adNetwork && __jsx(React.Fragment, null, __jsx(\"link\", {\n    rel: \"preconnect\",\n    href: \"https://static.doubleclick.net\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 17\n    }\n  }), __jsx(\"link\", {\n    rel: \"preconnect\",\n    href: \"https://googleads.g.doubleclick.net\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 17\n    }\n  })))), __jsx(\"div\", {\n    className: `${wrapperClass} ${iframe && activatedClass}`,\n    \"data-title\": videoTitle,\n    ref: refVideo,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }\n  }, iframe ? null : __jsx(\"div\", {\n    className: playerClass,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 26\n    }\n  }), iframe && __jsx(\"iframe\", {\n    className: iframeClass,\n    title: videoTitle,\n    width: \"560\",\n    height: \"315\",\n    frameBorder: \"0\",\n    allowFullScreen: true,\n    src: iframeSrc,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 11\n    }\n  })));\n};\n\nLiteYouTubeEmbed.defaultProps = {\n  adNetwork: true,\n  id: \"\",\n  playlist: false,\n  poster: \"hqdefault\",\n  title: \"YouTube Embed\",\n  noCookie: false,\n  activatedClass: \"lyt-activated\",\n  iframeClass: \"\",\n  playerClass: \"lty-playbtn\",\n  wrapperClass: \"yt-lite\"\n};\nexport default LiteYouTubeEmbed;","map":{"version":3,"sources":["/Users/vancetan/Documents/the-next-stage/Frontend/utils/youtube.js"],"names":["React","useState","useRef","useEffect","LiteYouTubeEmbed","adNetwork","id","playlist","poster","title","noCookie","activatedClass","iframeClass","playerClass","wrapperClass","preconnected","setPreconnected","iframe","setIframe","videoId","encodeURIComponent","videoTitle","posterUrl","ytUrl","iframeSrc","refVideo","warmConnections","addIframe","current","style","backgroundImage","addEventListener","removeEventListener","defaultProps"],"mappings":"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","sourcesContent":["import React, { useState, useRef, useEffect } from \"react\";\n\nconst LiteYouTubeEmbed = ({\n  adNetwork,\n  id,\n  playlist,\n  poster,\n  title,\n  noCookie,\n  activatedClass,\n  iframeClass,\n  playerClass,\n  wrapperClass,\n}) => {\n  const [preconnected, setPreconnected] = useState(false);\n  const [iframe, setIframe] = useState(false);\n  const videoId = encodeURIComponent(id);\n  const videoTitle = title;\n  const posterUrl = `https://i.ytimg.com/vi/${videoId}/${poster}.jpg`;\n  const ytUrl = noCookie\n    ? \"https://www.youtube-nocookie.com\"\n    : \"https://www.youtube.com\";\n  const iframeSrc = !playlist\n    ? `${ytUrl}/embed/${videoId}?autoplay=1`\n    : `${ytUrl}/embed/videoseries?list=${videoId}`;\n  const refVideo = useRef();\n\n  const warmConnections = () => {\n    if (preconnected) return;\n    setPreconnected(true);\n  };\n  const addIframe = () => {\n    if (iframe) return;\n    setIframe(true);\n  };\n\n  useEffect(() => {\n    const { current } = refVideo;\n    current.style.backgroundImage = `url('${posterUrl}')`;\n    current.addEventListener(\"pointerover\", warmConnections, true);\n    current.addEventListener(\"click\", addIframe, true);\n\n    return () => {\n      current.removeEventListener(\"pointerover\", warmConnections);\n      current.removeEventListener(\"click\", addIframe);\n    };\n  });\n\n  return (\n    <>\n      <link rel=\"preload\" href={posterUrl} as=\"image\" />\n      <>\n        {preconnected && (\n          <>\n            <link rel=\"preconnect\" href={ytUrl} />\n            <link rel=\"preconnect\" href=\"https://www.google.com\" />\n            {adNetwork && (\n              <>\n                <link rel=\"preconnect\" href=\"https://static.doubleclick.net\" />\n                <link\n                  rel=\"preconnect\"\n                  href=\"https://googleads.g.doubleclick.net\"\n                />\n              </>\n            )}\n          </>\n        )}\n      </>\n      <div\n        className={`${wrapperClass} ${iframe && activatedClass}`}\n        data-title={videoTitle}\n        ref={refVideo}\n      >\n        {iframe ? null : <div className={playerClass}></div>}\n        {iframe && (\n          <iframe\n            className={iframeClass}\n            title={videoTitle}\n            width=\"560\"\n            height=\"315\"\n            frameBorder=\"0\"\n            allowFullScreen\n            src={iframeSrc}\n          ></iframe>\n        )}\n      </div>\n    </>\n  );\n};\n\nLiteYouTubeEmbed.defaultProps = {\n  adNetwork: true,\n  id: \"\",\n  playlist: false,\n  poster: \"hqdefault\",\n  title: \"YouTube Embed\",\n  noCookie: false,\n  activatedClass: \"lyt-activated\",\n  iframeClass: \"\",\n  playerClass: \"lty-playbtn\",\n  wrapperClass: \"yt-lite\",\n};\n\nexport default LiteYouTubeEmbed;\n"]},"metadata":{},"sourceType":"module"}